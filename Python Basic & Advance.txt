first install python 


1. data types .


	int -- a = 10 (auto find for python this is int )

	flat -- b = 0.4 (auto find in python )

	string -- c = " this is new word " ( " " is a string mention )


2. data type change .

	
	a = "10"
	b = "20"
	c = a + b

	print (c)  output: 1020 (" " is meaning for string )

	--- solution ---
	
	a = int ("10")
	b = int ("20")
	c = a + b
		
	print (c)  output: 30 ( int using inside off all numbers and don't allow letters)


3. if else concept .


	if - is condition
	
	else - is unsatisfied if condition it will be work

	a = 10
	if (a=10):
		print(" this number is ten ")
	else:
		print(" this number is not ten ") 

4. what's reminder .
	

	15 % 3 is a 0.
		
		ex: 15/3 is 5*3 =15 reminder is a 0.

	14 % 3 is a 2.

		ex: 15/3 is 4*3 =12 reminder is a 2.

		
	EX:	a=15
		if (a % 3 ==0):
			print(" this number division by 3")
		else:
			print(" this number not division by 3 ")


5.nested if .


	nested if is all condition check and will end the program


	mark=35

	if (mark<35):

		print("fail)

	if (mark>=35) & (mark<=70):

		print("pass")

	if (mark>70) & (mark<=100):

		print("excellent")


6.elif concept.



	elif is a when condition will be a true exit the program
	
		

	mark=65

	if (mark<35):

		print("fail)

	elif (mark>=35) & (mark<=70):

		print("pass")

	elif (mark>70) & (mark<=100):

		print("excellent")


	
	output= "pass"  my program will be second elif finished and exit 



7.for loop .


	for loop is list loop

	
	EX: for i in range(1,10):
		
		print(i)


	EX: count=0

		for x in range(1,10):
		
			if(x%2==0):
		
				count=count+1
		print(x)

		---- out put === 4



8.while loop .



		
		while loop is a unknown the end loop will run , 
		if your error infinity loop .



		a=1

		while (a>10):
			print(a)
			a= a+1


		output  :  1 to 9

		

		2. factorial
		
		a=3

		fact=1

		while (a>0):
			fact=fact*a
			a= a-1

		print(fact)




9. list , tuple , set , dictionary .




		list .
	
			1. []  this simple using , it's allow  all type of data

			2. mutable , change and modifying 

			3. it allow for duplicate [1,1,1,2]

		tuple .

			1. ()  this simple using , it's allow all data type

			2. immutable , we can't change and modifying 

			3. it allow for duplicate (1,1,1,2) 

		set .

			1. {}  this simple using , it's allow all data type's

			2. we can't change  and modifying , you can update

			3. it's don't allow for duplicate
 		

		Dictionary .

			1. {"name ": "prasanth} this simple using and this type 

			2. modifying the data

			3. don't allow duplicate's

			4. allow all data type's
	




10. function .


		This function using for a all high level program

		

		dif list(a,b):

			for x in range (a,b):

				print(x,end=" ")
		list(1,10)



		return -------

	
			one function inside any value and data here that value is 

			a return to main function called to return function.


			
			u="hacker"

			p="0101"

			u_name=input("enter username  : ")

			password=input("enter password : ")

			def login ():
		
				if u==u_name and p==password :
					
					return "correct"

				else:
		
					return "incorrect"

			print(login())
			


11. class and object .



	class is bundle of function , variables using.

	object access in class 



	class laptop:

		price=" "

		def good():

			print("this laptop was good price")

		def bad():

			print(" this laptop was over priced ")


	one=laptop.good()
	two=laptop.bad()

	hp=laptop()
	asus=laptop()

	hp.price="700000"
	asus.price="40000"

	print(hp.price,two)
	print(asus.price,one)



12.Constructor and self key words .


	constructor is __init__ function , this is when i create a object 
	
	automatically called a init function , init is python inbuild function




            class laptop:
                def __init__(self):
                    self.price=""
                    self.ram=""
                def display(self):
                    print("price",self.price)
                    print("ram",self.ram)

            hp=laptop()
            dell=laptop()

            hp.price="50000"
            hp.ram="8gb"

            dell.price="700000"
            dell.ram="12gb"

            hp.display()

            dell.display()



	Examples : 



            class teacher:
                def __init__(self,name,reg):
                    self.name=name
                    self.reg=reg
                def display(self):
                    print("name: ",self.name)
                    print("reg no: ", self.reg)

            t1=teacher("revathy","21")
            t2=teacher("charu","32")

            t1.display()
            t2.display()


13.  class variable .


		this class variable access to all function 


		
		class phone:

                type="type-c"   ------------ this the class variable --------

                def __init__ (self,brand,value):
                    self.brand=brand
                    self.value=value

                def display(self):
                    print("Brand:",self.brand)
                    print("value:",self.value)
                    print("type:",self.type)

            samsung=phone("samsung","700000")
            iphone=phone("iphone","120000")

            samsung.display()
            iphone.display()


14.  inhertance:

	single inheritance:

		single one class to another class merge

	multi inheritance:
		
		i have a class a,b used to --- class c(a,b) ---

	multilevel inheritance:

		i have a class and link to class b and link to class c

		class(a):

		class(b):

		class(C):

		c class access to a class 



15.Encapsulation .

	
	one public variable to private variable change that's encapsulation

	1. underscore is not a public access variable
	
	2. single underscore is protector variable (" class and child class accessible" )
	
	3. double underscore is a private variable (" only class inside method accessible ")


        class company:

            def __init__(self):

                self.__cname="google"   ## __ double underscore is private variable

            def col(self):

                print(self.__cname)

        c1=company()

        c1.col()



16. Polymorphism .



		polymorphism is Four type

1. Method overloading

        def cal(a,b,c=0):

            print(a+b+c)
                                        # method overloading -- compile time polymorphism
        cal(10,20,50)



2. Method overwriting .



        class a1:

            def meth():
                print("Hello")           # this is method overwriting -- runtime polymorphism

        class a2(a1):

            def meth():
                print("World")

        b=a2()

        a2.meth()




3. duck typing .



            # duck typing 
            

            class duck:

                def swim(self):
                    print("duck is swiming")
                def walk(self):
                    print("duck is walking")

            class dog:

                def swim(self):
                    print("dog is swimming")
                def walk(self):
                    print("dog is walking")


            def res(obj):

                obj.swim()
                obj.walk()
                print("information collected \n")

            d=duck()
            d1=dog()

            res(d)
            res(d1)




4.  operator overloading .

	
		two object (add,mul,div,sub)  this function using overload the operator ,



            # operatoer overloading 

    # ---------  first type

            class theme:
                def __init__(self,a):		# this is a operator overloading

                    self.a=a

                def __add__ (self,other):

                    self.other=other

                    return obj1.a+other.a

            obj1=theme(10)
            obj2=theme(20)

            print(" add overloading " , obj1+obj2)


    # ---------  second type

            class employee:
                def __init__(self,name,salary):

                    self.name=name
                    self.salary=salary

                def __mul__(self,other):

                    self.other=other
                    return obj1.salary*obj2.days

                

            class payroll:
                
                def __init__(self,days):

                    self.days=days


            obj1=employee("prasanth",2000)
            obj2=payroll(28)


            print(obj1.name," = Net salary : ",obj1*obj2)




17.exception handling .

		
		exception handling is a error handling , first try if success run this try block

		if unsuccess run exception block

		

            a=input("enter the number : ")
            b=input("enter the number : ")

            try:
                c=a/b           				# this main function

            except ZeroDivisionError:

                print("error:division by zero is not allowed")  # this type of error

            except ValueError:

                print("error:invalid input")   			# this type of error

            except Exception:

                print("error:unknown error")    		# all kind of error 

            else:
                print("result:",c)      			# no error run this block

            finally:
                print("thank you")      			# if error (or) not error this finally block run





18 . Abstract class 


	* you can't create a object for abstract class

	* classes inheriting abstract class must overwriting all abstract method

	* it's using for some general function . EX-- car is " start, stop "




            # abstract class

            from abc import ABC,abstractmethod

            class room(ABC):

                @abstractmethod                  # Decoretor
                def open():
                    pass

            class room1(room):

                def open():
                    print("the room is lock")


            class room2(room):

                def open():
                    print("this room2 class")


            obj1=room2.open()

            obj2=room1.open()



19. module .


	* module is imported files and access the working file


	* you have a two files one file to another file give an access and use function

	EX----

	1. import email "email is a file name "		--- Recommend for use------

	2. import email as p " p is a alas name "

	3. from email import msg " this is i only access for msg function "

	4. from email import * " this * symbol is all functions access " 


20. Iterator .

	
	one time use this variable memory

	list1=iter([0,20,30,40])


21. Generator .

	
	function given the multiple returns


	
            def open (x,y,z):
                res1=x+y+z
                res2=x-y-z
                res3=x*y*z

                yield res1		---- yield is multiple return -----
                yield res2
                yield res3


            op=open(10,20,30)

            print(next(op))       ----- next is inbuild function -----
            print(next(op))
            print(next(op))	  ----- next use for next return process ----



22. user define function .


	
	1. require and positional argument	( def pop (x,y,z) )

	2. require and non positional argument	(def pop (x=10, y=20,z=30) )

	3. default argument function		(def pop (x,y,z=10) )

	4. variable length argument function	(def pop (x,y,*z) ) --- *z multiple variable store ---




23. file handling .


	* open the file and read

	
		new=open(r'D:\practice\file.txt','r')  --- open file 

		j=new.read()				-- read file

		new.close()				-- file closed

		print(j)
	


	* overwrite the file

		new = open (r 'D:\practice\file.txt', 'w')

		j=new.write ("new comment")

		j=new . writelines (''' the new line
					second line ''')

		k=new.read()

		print(k)

	* append the line

		new = open (r 'D:\practice\file.txt', 'a')

		j=new.append ("new comment")
		

	* with function using file handling

		with open (r 'D:\practice\file.txt','r') as p:

			print(p.read())




24. Multi threading .

	
		multi threading is a multiple tasks run fast execute


	
            import threading

            import time

            def squre(num):

                for x in num:
                    time.sleep(0.3)		--- time sleep
                    print(x*x)

            def cube(num):

                for y in num:
                    time.sleep(0.2)
                    print(y*y*y)

            l1=[5,10,20,50]
            stime=time.time()

            t1 = threading.Thread(target=squre,args=(l1,))	--- thread connect
            t2 = threading.Thread(target=cube,args=(l1,))

            t1.start(),t2.start()				--- start thread

            t1.join(),t2.join()					--- thread finish after run main program

            etime = time.time()

            ftime = etime-stime

            print(ftime)



25.regex ( regular expression )



            Function	                Purpose	                                 Returns

            re.match()	        Matches at the start of the string           	Match object or None

            re.search()	        Finds the first match in the string	        Match object or None

            re.findall()	Finds all matches in the string	        	List of matches

            re.finditer()	Finds all matches and returns an iterator	Iterator of match objects

            re.split()	        Splits the string using the pattern	        List of substrings

            re.sub()	        Replaces matches with a replacement string	New string

            re.subn()	        Same as re.sub() but includes count	        Tuple (new string, count)

            re.compile()	Compiles a regex for reuse	                Regex object





            import re

            patrn='[0-9]{10}'

            doc='''
                    the ramu phone number id 9832466588
                    the deju phone nhimber id 9384245320
                    the siva phone number id 7384245320
            '''
            match1=re.match(patrn,doc)
            match2=re.search(patrn,doc)
            match3=re.findall(patrn,doc)
            match4=re.finditer(patrn,doc)
            match5=re.split(r'the',doc)
            match6=re.sub('id','is',doc)
            match7=re.subn('the','it is',doc)
            

            print(match1)
            print(match2)
            print(match3)
            print(match4)
            print(match5)
            print(match6)
            print(match7)

            print("index is --",match2.start())
            print("index is --",match2.end())
            print("index is --",match2.span())
            print("index is --",match2.group())





            Character	        Description	                        Example

            .	        Matches any single character	        a.c matches "abc"
            ^	        Matches start of the string	            ^Hello matches "Hello world"
            $	        Matches end of the string	            world$ matches "Hello world"
            \	        Escape for metacharacters	            \. matches "."
            []	        Character class	                        [abc] matches "a"
            `	        `	                                    OR operator




            *	        Matches 0 or more repetitions	        ab* matches "a", "ab", "abb"
            +	        Matches 1 or more repetitions	        ab+ matches "ab", "abb"
            ?	        Matches 0 or 1 occurrence	            ab? matches "a", "ab"
            {n}	        Matches exactly n times	a{3}            matches "aaa"
            {n,}	    Matches n or more times	a{2,}           matches "aa", "aaa"
            {n,m}	    Matches between n and m	a{1,3}          matches "a", "aa", "aaa"





            [abc]	    Matches a, b, or c	                    [aeiou] matches vowels
            [^abc]	    Negation: matches not a, b, c	        [^aeiou] matches consonants
            [0-9]	    Matches digits	                        Matches "123"
            [a-z]	    Matches lowercase letters	            Matches "abc"
            [A-Z]	    Matches uppercase letters	            Matches "ABC"
            [a-zA-Z0-9]	    Matches alphanumeric characters	        Matches "abc123"




            \d	        Matches digits [0-9]	                Matches "123"
            \D	        Matches non-digits [^0-9]	            Matches "abc"
            \w	        Matches word characters [a-zA-Z0-9_]	Matches "abc123"
            \W	        Matches non-word characters	            Matches "@#%"
            \s	        Matches whitespace (space, tab)     	Matches " "
            \S	        Matches non-whitespace characters	    Matches "abc"




            ^	        Matches the start of the string	        ^Hello matches "Hello"
            $	        Matches the end of the string	        world$ matches "world"
            \b	        Matches word boundaries	\bcat\b         matches "cat" but not "scatter"
            \B	        Matches non-boundary positions	        \Bcat matches "scatter"



            (abc)	    Captures group abc	                    `(cat
            (?:abc)	    Non-capturing group	`                   (?:cat
            (?P<name>abc)	Named group	                        Matches "abc" as name
            \1	        Refers to first captured group	        (a)b\1 matches "aba"




27. Decorator .

	
		one function with out change any lines but functionality change using for decorator

		one function with out modification but behavior change using for decorator

		
		@ simple using for Decorator





	1. Function Decorator 


		*** single ***

			
                def upper(ref):
                    def inner():
                        data=ref()
                        out=data.upper()
                        return out			
                    return inner		#return function refrence


                @upper
                def outer():
                    return " welcome to python "

                print(outer())

		


		*** multiple decorator ***

		
	

                def upper(ref):
                    def inner():
                        data=ref()
                        out=data.upper()
                        return out
                    return inner

                def Split(ref):
                    def inner():
                        data=ref()
                        out=data.split()
                        return out
                    return inner


                @Split
                @upper
                def outer():
                    return " welcome to python "

                print(outer())



		*** with argument ***





                def String(str):
                    def inner(ref):
                        def res():
                            data=ref()
                            out=data.upper() + str
                            return out
                        return res
                    return inner


                @String(" and a parameter passing")
                def outer():
                    return " welcome to python "


                print(outer())

	

	2. class Decorator .



		
		simple function decorator same using for class decorator




                def myfucn(ref):
                    def inner(*arg):
                        return ref (*arg).upper()
                    return inner



                @myfucn
                def outer(str1, str2):
                    return f"hello " + str1 + " and " + str2

                print(outer("ram","de gobal"))






		class Decorator -----------------





                    class myfucn:

                        def __init__ (self,ref):
                            self.ref=ref

                        def __call__ (self,*arg):
                            
                            return self.ref(*arg).upper()


                    @myfucn
                    def outer(str1, str2):
                        return f"hello " + str1 + " and " + str2

                    print(outer("ram","de gobal"))














